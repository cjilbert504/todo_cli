#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

class App
  extend GLI::App

  program_desc 'Describe your application here'

  version Todo::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Path to the todo file'
  default_value '~/.todo.txt'
  arg_name 'todo_file'
  flag [:f, :filename]

  desc 'Create a new task in the task list'
  long_desc "A task has a name and a priority. By default, new tasks have the lowest possible priority, though this can be overridden."
  arg_name 'task_name'
  command :new do |c|
    c.desc 'set the priority of the new task, 1 being the highest'
    c.arg_name "priority"
    c.flag :p

    c.desc 'put the new task first in the list'
    c.switch :f

    c.action do |global_options, options, task_names|
      File.open(global_options[:filename], "a+") do |todo_file|
        if task_names.empty?
          puts "Reading new tasks from stdin..."
          task_names = STDIN.readlines.map { |input| input.chomp }
        end

        tasks = 0
        task_names.each do |task|
          todo_file.puts [task, Time.now].join ","
          tasks += 1
        end

        if tasks == 0
          raise "You must provide tasks on the command-line or standard input"
        end
      end
    end
  end

  desc 'List tasks'
  command [:list, :ls] do |c|
    c.flag :s

    c.desc "Format of the output (pretty for TTY, csv otherwise)"
    c.arg_name "csv|pretty"
    c.flag :format

    c.action do |global_options,options,args|
      if options[:format] = nil
        if STDOUT.tty?
          options[:format] = "pretty"
        else
          options[:format] = "csv"
        end
      end

      todos = read_todos(global_options[:filename])

      if options[:s] == "name"
        todos = todos.sort { |a, b| a <=> b }
      end

      todos.each do |todo|
        if options[:format] == "pretty"
          # Use the pretty format
        elsif options[:format] == "csv"
          # Use the machine-readable CSV format
          complete_flag = completed ? "DONE" : "INCOMPLETE"
          printf("%d, %s, %s, %s, %s\n", index, name, complete_flag, created, completed)
        end
      end
    end
  end

  desc 'Mark a task as done'
  # arg_name 'Describe arguments to done here'
  command :done do |c|
    c.action do |global_options,options,args|
      puts "Global:"
      puts "-f - #{global_toptions[:f]}"
    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
